// Code generated by moq; DO NOT EDIT.
// gitlab.diskarte.net/engineering/moqc fork from github.com/matryer/moq

package mock

import (
	"sync"

	"github.com/DarthPestilane/easytcp"
	"github.com/donmikel/wow/applications/server/handlers/quotes"
)

var _ quotes.ServerInterface = &ServerInterface{}

// ServerInterface is a mock implementation of guide.ServerInterface.
type ServerInterface struct {
	// GetQuoteFn mocks the GetQuote method.
	GetQuoteFn func(c easytcp.Context)

	// VerifyChallengeFn mocks the VerifyChallenge method.
	VerifyChallengeFn func(c easytcp.Context)

	// calls tracks calls to the methods.
	calls struct {
		// GetQuote holds details about calls to the GetQuote method.
		GetQuote []struct {
			C easytcp.Context
		}
		// VerifyChallenge holds details about calls to the VerifyChallenge method.
		VerifyChallenge []struct {
			C easytcp.Context
		}
	}
	lockGetQuote        sync.RWMutex
	lockVerifyChallenge sync.RWMutex
}

// GetQuote calls GetQuoteFn.
func (mock *ServerInterface) GetQuote(c easytcp.Context) {
	callInfo := struct {
		C easytcp.Context
	}{
		C: c,
	}
	mock.lockGetQuote.Lock()
	mock.calls.GetQuote = append(mock.calls.GetQuote, callInfo)
	mock.lockGetQuote.Unlock()
	if mock.GetQuoteFn == nil {
		return
	}
	mock.GetQuoteFn(c)
}

// GetQuoteCalls gets all the calls that were made to GetQuote.
// Check the length with:
//
//	len(mockedServerInterface.GetQuoteCalls())
func (mock *ServerInterface) GetQuoteCalls() []struct {
	C easytcp.Context
} {
	var calls []struct {
		C easytcp.Context
	}
	mock.lockGetQuote.RLock()
	calls = mock.calls.GetQuote
	mock.lockGetQuote.RUnlock()
	return calls
}

// VerifyChallenge calls VerifyChallengeFn.
func (mock *ServerInterface) VerifyChallenge(c easytcp.Context) {
	callInfo := struct {
		C easytcp.Context
	}{
		C: c,
	}
	mock.lockVerifyChallenge.Lock()
	mock.calls.VerifyChallenge = append(mock.calls.VerifyChallenge, callInfo)
	mock.lockVerifyChallenge.Unlock()
	if mock.VerifyChallengeFn == nil {
		return
	}
	mock.VerifyChallengeFn(c)
}

// VerifyChallengeCalls gets all the calls that were made to VerifyChallenge.
// Check the length with:
//
//	len(mockedServerInterface.VerifyChallengeCalls())
func (mock *ServerInterface) VerifyChallengeCalls() []struct {
	C easytcp.Context
} {
	var calls []struct {
		C easytcp.Context
	}
	mock.lockVerifyChallenge.RLock()
	calls = mock.calls.VerifyChallenge
	mock.lockVerifyChallenge.RUnlock()
	return calls
}
