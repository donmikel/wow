// Code generated by moq; DO NOT EDIT.
// gitlab.diskarte.net/engineering/moqc fork from github.com/matryer/moq

package mock

import (
	"sync"

	"github.com/donmikel/wow/applications/client"
	"github.com/donmikel/wow/applications/client/interfaces"
)

var _ interfaces.Server = &Server{}

// Server is a mock implementation of interfaces.Server.
type Server struct {
	// GetQuoteFn mocks the GetQuote method.
	GetQuoteFn func(startHash string, finishHash string) (string, error)

	// MakeChallengeFn mocks the MakeChallenge method.
	MakeChallengeFn func() (client.ChallengeHeader, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetQuote holds details about calls to the GetQuote method.
		GetQuote []struct {
			StartHash  string
			FinishHash string
		}
		// MakeChallenge holds details about calls to the MakeChallenge method.
		MakeChallenge []struct {
		}
	}
	lockGetQuote      sync.RWMutex
	lockMakeChallenge sync.RWMutex
}

// GetQuote calls GetQuoteFn.
func (mock *Server) GetQuote(startHash string, finishHash string) (string, error) {
	callInfo := struct {
		StartHash  string
		FinishHash string
	}{
		StartHash:  startHash,
		FinishHash: finishHash,
	}
	mock.lockGetQuote.Lock()
	mock.calls.GetQuote = append(mock.calls.GetQuote, callInfo)
	mock.lockGetQuote.Unlock()
	if mock.GetQuoteFn == nil {
		var (
			out1 string
			out2 error
		)
		return out1, out2
	}
	return mock.GetQuoteFn(startHash, finishHash)
}

// GetQuoteCalls gets all the calls that were made to GetQuote.
// Check the length with:
//
//	len(mockedServer.GetQuoteCalls())
func (mock *Server) GetQuoteCalls() []struct {
	StartHash  string
	FinishHash string
} {
	var calls []struct {
		StartHash  string
		FinishHash string
	}
	mock.lockGetQuote.RLock()
	calls = mock.calls.GetQuote
	mock.lockGetQuote.RUnlock()
	return calls
}

// MakeChallenge calls MakeChallengeFn.
func (mock *Server) MakeChallenge() (client.ChallengeHeader, error) {
	callInfo := struct {
	}{}
	mock.lockMakeChallenge.Lock()
	mock.calls.MakeChallenge = append(mock.calls.MakeChallenge, callInfo)
	mock.lockMakeChallenge.Unlock()
	if mock.MakeChallengeFn == nil {
		var (
			out1 client.ChallengeHeader
			out2 error
		)
		return out1, out2
	}
	return mock.MakeChallengeFn()
}

// MakeChallengeCalls gets all the calls that were made to MakeChallenge.
// Check the length with:
//
//	len(mockedServer.MakeChallengeCalls())
func (mock *Server) MakeChallengeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMakeChallenge.RLock()
	calls = mock.calls.MakeChallenge
	mock.lockMakeChallenge.RUnlock()
	return calls
}
